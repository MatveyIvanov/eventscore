[project]
name = "eventscore"
version = "0.1.0"
authors = [
    { name = "Matvey Ivanov", email = "cool.matvey250301@gmail.com" },
]
description = "Power up your application with event-driven design!"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]
license = "MIT"
license-files = ["LICEN[CS]E*"]

[project.urls]
Homepage = "https://github.com/MatveyIvanov/eventscore"
Issues = "https://github.com/MatveyIvanov/eventscore/issues"

[tool.poetry]
name = "eventscore"
version = "0.1.0"
description = "Power up your application with event-driven design!"
authors = ["MatveyIvanov <cool.matvey250301@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
redis = "5.2.1"

[tool.poetry.group.dev.dependencies]
pytest = "8.2.1"
pytest-cov = "5.0.0"
pytest-mock = "3.14.0"
pytest-asyncio = "0.23.5"
flake8 = "7.1.0"
mypy = "1.10.0"
black = "24.4.2"
pre-commit = "3.7.1"
isort = "5.13.2"
sphinx = "8.2.3"
tox = "4.24.2"
ruff = "0.11.2"
pyright = "1.1.397"

[tool.pytest.ini_options]
pythonpath = [
    "."
]
python_files = "test_*.py"
filterwarnings = [
    "ignore::RuntimeWarning"
]
markers = [
    "unit: marks tests as unit-tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration-tests (deselect with '-m \"not integration\"')",
]
addopts = [
    "-v",
    "-rfxP",
    "--cov",
    "--log-level=CRITICAL",
]

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
show_missing = true
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
omit = [
    "*conftest.py",
    "*abstract.py",
    "*__init__*",
    "*tests*",
    "*.tox*",
]

[tool.black]
exclude = '''
    .tox*
'''

[tool.isort]
profile = "black"
skip_glob = [
    ".tox*"
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
python_version = 3.11
exclude = [
    "tests",
    "tests\\.py",
    "examples",
]
ignore_missing_imports = false
plugins = [

]

[tool.pyright]
include = ["eventscore"]
exclude = [
    "**/__pycache__",
    ".tox",
    "docs",
    "examples",
]
ignore = [
    ".tox",
    "docs",
    "examples",
]
defineConstant = { DEBUG = true }

reportMissingImports = "error"
reportMissingTypeStubs = false

pythonVersion = "3.11"
pythonPlatform = "Linux"

executionEnvironments = [
    { root = "." },
]

[tool.tox]
requires = ["tox>=4.24.2"]
env_list = [
    "3.13",
    "3.12",
    "3.11",
    "flake8",
    "black",
    "isort",
    "mypy",
    "coveralls",
]

[tool.tox.env_run_base]
description = "Run test under {base_python}"
deps = [
    "pytest==8.2.1",
    "pytest-cov==5.0.0",
    "pytest-mock==3.14.0",
    "pytest-asyncio==0.23.5",
]
commands = [["pytest", "tests"]]

[tool.tox.env.flake8]
description = "Run Flake8 on code base"
deps = [
    "flake8==7.1.0",
]
commands = [
    ["flake8", "--config", ".flake8", "."],
]

[tool.tox.env.black]
description = "Run Black on code base"
deps = [
    "black==24.4.2",
]
commands = [
    ["black", "--config", "pyproject.toml", "--check", "."],
]

[tool.tox.env.isort]
description = "Run isort on code base"
deps = [
    "isort==5.13.2"
]
commands = [
    ["isort", "--profile", "black", "--filter-files", "--check", "."],
]

[tool.tox.env.mypy]
description = "Run mypy on code base"
deps = [
    "mypy==1.10.0",
]
commands = [["mypy", "eventscore"]]

[tool.tox.env.coveralls]
passenv = [
    "GITHUB_*",
    "COVERALLS_*",
]
basepython = [
    "py312",
]
deps = [
    "{[env_run_base]deps}",
    "coverage==7.6.12",
    "coveralls==4.0.1",
]
commands = [
    ["coverage", "erase"],
    ["pytest", "tests"],
    ["coverage", "report"],
    ["python", "-m", "pip", "install", "coveralls==4.0.1"], # ...
    ["coveralls"],
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
